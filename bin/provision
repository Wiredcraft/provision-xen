#!/usr/bin/env python
"""
Usage: 
    provision (--version|--help)
    provision configure
    provision create --config=<config>
    provision create [--cpu=<cpu>] [--ram=<ram>] [--disk=<disk>] [--swap=<swap>]
                     [--interface=<interface>...] [--bridge=<bridge>...]
                     [--hostname=<hostname>] [--create-only] 
                     [--templates=<templates>] [--dest=<dest>]
                     [--firewall]
                     --image=<image> <name>
    provision delete [--path-server=<path-server>] [--full] <name>

Options:
    --config=<config>                   Path to a config file that specify the details of a server
    --cpu=<cpu>                         Number of CPU cores to allocate to the server [default: 4]
    --ram=<ram>                         Amount of RAM to allocate to the server (in MB) [default: 512]
    --disk=<disk>                       Disk size to allocate to the server (in GB) [default: 4]
    --swap=<swap>                       SWAP size to allocate to the server (in GB) [default: 0.5]
    --interface=<interface>...          List of network interfaces (details below) [default: eth0:dhcp]
    --bridge=<bridge>...                List of network bridges (details below) [default: xenbr0:eth0]
    --hostname=<hostname>               A hostname to apply to the server
    --create-only                       Only create the instance, do not start
    --dest=<dest>                       Path where the config and disks will be created [default: .]
    --templates=<templates>             Path where we can find the image templates [default: /data/xen/templates]
    --firewall                          Enable or not the firewall [default: False]
    <name>                              A unique name for the server

Help:
    provision configure                         Configure the environment, the template paths, etc.
    provision create --image=<image> <name>     Create and start a server
    provision delete                            Stop a server and delete the disks [EXPERIMENTAL]

A typical configuration for a host looks like this:

{
    "name": "unique_name",
    "hostname": "some_hostname",
    "image": "debian8/base",
    "cpu": 4,
    "ram": 512,
    "disk": 20,
    "swap": 2,
    "interfaces": [
        {
            "name": "eth0",
            "type": "static",
            "address": "1.1.1.2",
            "netmask": "255.255.255.0",
            "gateway": "1.1.1.1"
        },
        {
            "name": "eth1",
            "type": "dhcp"
        }
    ],
    "bridges": {
        "eth0": "xenbr0",
        "eth1": "xenbr1"
    }
}

When using the CLI parameters, the interfaces and bridges definitions need to follow a specific format.

Interfaces: 
  - format: "if_name:type:address:mask:gateway"
  - details:
    - if_name: a valid interface name; e.g. eth0 / eth1
    - type: either dhcp or static, it dhcp other parameters are ignored - default dhcp
    - address: only if static, a valid IP address
    - mask (optional): only if static, a valid netmask - default to 255.255.255.0
    - gateway (optional): only if static, the gateway IP address
  - e.g:
    - 'eth0' --> eth0 is dhcp based
    - 'eth1:dhcp' --> eth1 is dhcp based
    - 'eth1:static:192.168.1.100::192.168.1.1' --> eth1 is static IP .100/24 with gateway to .1

Bridges:
  - format: "if_name:br_name"
  - details:
    - if_name: an interface to bind on the bridge; e.g. eth0
    - br_name: an existing bridge name; e.g. xenbr0
  - e.g:
    - 'eth0:xenbr0' --> eth0 bind to xenbr0
    - 'eth1:xenbr1' --> eth1 bind to xenbr1

Firewall:
  If the `--firewall` option is selected, a file named after the server name (server_name.iptables) is 
  expected to be found. 
  The format is a JSON.

{
    "portforwards": [
        {
            "from": 80,
            "to": "192.168.1.2:3001"
        },
        {
            "from": 443,
            "to": "192.168.1.2:443"
        }
    ],
    "gateway": True
}

"""

import docopt
import os
import sys
import json
from provision import __version__ 
from provision.provision import build

def _parse_interface(interface):
    '''
    Parse the interface string and return a proper dict
    '''
    iface = {
        'type': 'dhcp'
    }

    params = interface.split(':')
    if len(params) == 1:
        iface.update({'name': params[0]})
    elif len(params) == 2:
        iface.update({'name': params[0], 'type': params[1]})
    elif len(params) == 3:
        iface.update({'name': params[0], 'type': params[1], 'address': params[2], 'netmask': '255.255.255.0'})
    elif len(params) >= 4:
        # Handle netmask
        if params[3]:
            netmask = params[3]
        else:
            netmask = '255.255.255.0'
        iface.update({'name': params[0], 'type': params[1], 'address': params[2], 'netmask': netmask})
        # Handle gateway if defined
        if len(params) == 5:
            iface.update({'gateway': params[4]})
    else:
        # Invalid number of args
        raise RuntimeError('Too many parameters for interface')
    return iface

def _parse_bridge(bridge):
    '''
    Parse the bridges
    '''
    params = bridge.split(':')
    if len(params) == 2:
        return (params[0], params[1])
    else:
        # Invalid number of args
        raise RuntimeError('Invalid parameters for bridge')


def parse_ags(args):
    '''
    Provision the server
    '''

    interfaces = [ _parse_interface(interface) for interface in args.get('--interface') ]
    # Update the interfaces so the bridge get assigned
    for bridge_string in args.get('--bridge'):
        iface, bridge = _parse_bridge(bridge_string)
        for interface in interfaces:
            if interface.get('name') == iface:
                interface.update({'bridge': bridge})

    server = {
        'name': args.get('<name>'),
        'hostname': args.get('--hostname'),
        'image': args.get('--image'),
        'cpu': int(args.get('--cpu')),
        'ram': int(args.get('--ram')),
        'disk': float(args.get('--disk')),
        'swap': float(args.get('--swap')),
        'interfaces': interfaces
    }

    # Handle firewall
    if args.get('--firewall'):
        fw = args.get('<name>') +'.iptables'
        if not os.path.exists(fw):
            raise RuntimeError('Missing Firewall file: %s' % fw)
        
        try:
            firewall = json.load(fw)
        except:
            print 'Error while loading the Firewall file: %s' % fw
            raise

        server.update({'firewall': firewall})

    return server

def ensure_root():
    '''
    Currently require the run as root (UID=0)
    '''
    if os.getuid() != 0:
        sys.stderr.write('Currently required to run as root. Either swith to root user or use the sudo command.\n')
        sys.exit(1)

if __name__ == '__main__':
    args = docopt.docopt(
        __doc__,
        version="version "+ __version__,
        help=True
    )

    if args.get('configure'):
        print "Configure the tool (soon)."
        
    if args.get('create'):
        if args.get('--config'):
            print "Does not support yet the config file - use the CLI arguments."
            sys.exit(1)
        else:
            server = parse_ags(args)
        ensure_root()
        build(server, 
            createonly=args.get('--create-only'), 
            templates=args.get('--templates'),
            dest=args.get('--dest'))

    if args.get('delete'):
        print "Delete the server (soon)."
    